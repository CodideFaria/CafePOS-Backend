services:
  backend:
    build: .
    ports:
      - "8880:8880"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8880"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - cafepos_network

  db:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - cafepos_network

  seeder:
    build: .
    command: python seed.py
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - cafepos_network

  tester:
    build: .
    command: bash -c "python wait_for_db.py && pytest"
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_healthy
      seeder:
        condition: service_completed_successfully
    networks:
      - cafepos_network

volumes:
  postgres_data:

networks:
  cafepos_network:
    driver: bridge
